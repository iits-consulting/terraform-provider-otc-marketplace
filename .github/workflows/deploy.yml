name: Deploy Documentation

on:
  push:
    tags:
      - 'v*'

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
  contents: write

jobs:
  build:
    name: Build Terraform Provider with Goreleaser
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          # Allow goreleaser to access older tag information.
          fetch-depth: 0

      - name: Set Up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Download and extract codegen tools
        run: |
          mkdir -p tools
          curl -L -o tools/tfplugingen-openapi.zip \
            https://github.com/hashicorp/terraform-plugin-codegen-openapi/releases/download/v0.3.0/tfplugingen-openapi_0.3.0_linux_amd64.zip

          unzip -d tools/tfplugingen-openapi tools/tfplugingen-openapi.zip

          curl -L -o tools/tfplugingen-framework.zip \
            https://github.com/hashicorp/terraform-plugin-codegen-framework/releases/download/v0.4.1/tfplugingen-framework_0.4.1_linux_amd64.zip

          unzip -d tools/tfplugingen-framework tools/tfplugingen-framework.zip
          rm tools/*.zip

          # Add the directories containing the binaries to the PATH.
          # This method writes new PATH entries to $GITHUB_PATH so that theyâ€™ll be available in all subsequent steps.
          echo "$(pwd)/tools/tfplugingen-openapi" >> $GITHUB_PATH
          echo "$(pwd)/tools/tfplugingen-framework" >> $GITHUB_PATH

      - name: Generate Terraform definitions
        run: |
          tfplugingen-openapi generate --config ./generator_config.yml --output ./provider-code-spec.json ./openapi.yml  && \
          tfplugingen-framework generate all --input ./provider-code-spec.json --output ./internal

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@cb9bde2e2525e640591a934b1fd28eef1dcaf5e5 # v6.2.0
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@026299872805cb2db698e02dd7fb506a4da5122d # v6.2.0
        with:
          args: release --clean
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'


      - name: Build Docusaurus Documentation
        run: |
          npx create-docusaurus@latest "terraform provider otc-marketplace | Documentation" classic --typescript
          rm -rf "terraform provider otc-marketplace | Documentation"/docs
          mv docs "terraform provider otc-marketplace | Documentation"
          mv docusaurus.config.ts "terraform provider otc-marketplace | Documentation"
          cd "terraform provider otc-marketplace | Documentation"
          npm install
          npm install @docusaurus/plugin-client-redirects docusaurus-plugin-sass
          rm -rf src/pages/*
          npx docusaurus build
          mv build ../../public

      - name: Upload public artifact
        uses: actions/upload-artifact@v4
        with:
          name: public
          path: public